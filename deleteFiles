#! /usr/bin/env python3

import os.path
import sys

from typing import Set, Tuple

from bvzdisplaylib import displaylib as dl
from bvzcomparefiles import comparefiles

from src.parserdelete import Parser

# Set to true when debugging if you don't want to actually really delete or rename. Same as using the -T option, but
# this forces that on regardless of whether you remember to use it or not. Should be False for actual use.
ALWAYS_TRIAL = False

EXIT_OK = 0
EXIT_LOG_FILE_NOT_FOUND = 2
EXIT_LOG_FILE_NO_PERMISSION = 3
EXIT_MALFORMED_HEADER = 4
EXIT_UNABLE_TO_PARSE = 5
EXIT_FILE_METADATA_MISMATCH = 6

DELIMITER = "@COMPAREFOLDERS@"


# ----------------------------------------------------------------------------------------------------------------------
def parse_command_line() -> Parser:
    """
    Processes the command line arguments and returns a parser object

    :return: A Parser object containing the contents of the command line arguments.
    """

    parser_obj = Parser(sys.argv[1:])
    try:
        parser_obj.validate()
    except (FileNotFoundError, NotADirectoryError, PermissionError) as e:
        msg = f"{{RED}}Error:{{COLOR_NONE}} {e}"
        dl.print_msg(msg)
        sys.exit(EXIT_UNABLE_TO_PARSE)

    return parser_obj


# ----------------------------------------------------------------------------------------------------------------------
def read_raw_log_file(log_file_p) -> list:
    """
    Reads the log file and returns a raw list of the contents


    :param log_file_p: The path to the log file.

    :return: A list of the raw lines, without any processing.
    """

    try:
        with open(log_file_p, "r") as log_f:
            lines = log_f.readlines()
    except FileNotFoundError:
        msg = f"{{RED}}Error:{{COLOR_NONE}} Unable to find log file: {log_file_p}"
        dl.print_msg(msg)
        sys.exit(EXIT_LOG_FILE_NOT_FOUND)
    except PermissionError:
        msg = f"{{RED}}Error:{{COLOR_NONE}} You do not have permission to read log file: {log_file_p}"
        dl.print_msg(msg)
        sys.exit(EXIT_LOG_FILE_NO_PERMISSION)

    return lines


# ----------------------------------------------------------------------------------------------------------------------
def read_log_file_header(lines) -> Tuple[dict, list, str, int, int, int]:
    """
    Reads the header of the log file to extract metadata

    :param lines:
        The list of all lines in the log file. This is the raw file as read by the file.readlines() method.

    :return:
        A tuple containing the header data (options as dict, query directories as list, canonical directory as string,
        number of matches as int, number of unique as int, first line of log data as int.
    """

    raw_options = ""
    query_dirs = list()
    canonical_d = ""
    num_matches = 0
    num_unique = 0
    log_line = 0

    for log_line, line in enumerate(lines):
        if line.startswith("options="):
            raw_options = line.rstrip("\n").split("=")[1]
        if line.startswith("querydir"):
            query_dirs.append(line.rstrip("\n").split("=")[1])
        if line.startswith("canonicaldir="):
            canonical_d = line.rstrip("\n").split("=")[1]
        if line.startswith("num_matches="):
            num_matches = line.rstrip("\n").split("=")[1]
        if line.startswith("num_unique="):
            num_unique = line.rstrip("\n").split("=")[1]
            break  # -> every line after this is log data

    for query_d in query_dirs:
        if not os.path.exists(query_d):
            msg = f"{{RED}}Error:{{COLOR_NONE}} The query directory in log file header does not exist: {query_d}."
            dl.print_msg(msg)
            sys.exit(EXIT_MALFORMED_HEADER)

    if not os.path.exists(canonical_d):
        msg = f"{{RED}}Error:{{COLOR_NONE}} The canonical directory in log file header does not exist: {canonical_d}."
        dl.print_msg(msg)
        sys.exit(EXIT_MALFORMED_HEADER)

    for char in raw_options:
        if char not in "ntprcm":
            msg = f"{{RED}}Error:{{COLOR_NONE}} Illegal comparison operator in log file header: {char}."
            dl.print_msg(msg)
            sys.exit(EXIT_MALFORMED_HEADER)

    options = dict()
    options["match_on_name"] = "n" in raw_options
    options["match_on_parent"] = "p" in raw_options
    options["match_on_type"] = "t" in raw_options
    options["match_on_relpath"] = "r" in raw_options
    options["match_on_ctime"] = "c" in raw_options
    options["match_on_mtime"] = "m" in raw_options

    return options, query_dirs, canonical_d, num_matches, num_unique, log_line + 1


# ----------------------------------------------------------------------------------------------------------------------
def process_log(lines) -> Set[tuple]:
    """
    Processes the log and returns a set of items that are unique.

    :param lines: The raw list of lines from the log file. This MUST NOT INCLUDE the header lines.

    :return: A set containing each line split into a list.
    """

    process_lines = set()
    count = len(lines)
    i = 0

    try:
        for i, line in enumerate(lines):
            msg = f"Pre-Processing {i} of {count} - {{BRIGHT_YELLOW}}No files are being altered right now."
            if i % 10 == 0:
                dl.print_refreshable_msg(msg)
            line_split = tuple(line.rstrip("\n").split(DELIMITER))
            if line_split[0] == "D":
                process_lines.add(line_split)
        if len(process_lines) == 0:
            raise IndexError

    except IndexError:
        dl.print_msg("There are no duplicate files in the given log file.")
        sys.exit(EXIT_OK)

    except KeyboardInterrupt:
        dl.flush_refreshable_msg()
        msg = f"Pre-Processing {i} of {count} - No files are being altered right now."
        dl.print_msg(msg)
        dl.print_msg("Operation canceled by user.")
        sys.exit(EXIT_OK)

    dl.flush_refreshable_msg()
    dl.finish_refreshable_message()

    return process_lines


# ----------------------------------------------------------------------------------------------------------------------
def display_errors(errors):
    """
    Displays the list of errors.

    :param errors: The list of errors.

    :return: Nothing.
    """

    if len(errors) == 0:
        return

    error_file_p = os.path.expanduser(os.path.join("~", "deleteFiles_errors.log"))
    with open(error_file_p, "w") as log_f:
        for item in errors:
            log_f.write(f"{item[0]},{item[1]},{item[2]}")

    msg = f"\n\n{{BRIGHT_RED}}There were errors trying to rename or delete files."
    dl.print_msg(msg)
    msg = "Do you want to view the errors? (Y/N) "
    result = ""
    while result.upper() not in ["Y", "YES", "N", "NO"]:
        result = input(msg)

    if result.upper() in ["Y", "YES"]:
        dl.print_msg("\n\n")
        for item in errors:
            print(f"{item[2]}  ->  {item[0]}")

    dl.print_msg("\n\n")
    dl.print_msg(f"Error file written to: {error_file_p}")


# ----------------------------------------------------------------------------------------------------------------------
def rename_file(query_p,
                trial,
                quiet_trial,
                prefix="compareFoldersPendingDelete"):
    """
    Rename a query file.

    :param query_p: The full path to the file being renamed.
    :param trial: Whether to do a trial run instead of actually renaming.
    :param prefix: The prefix to prepend to the name. Defaults to "compareFoldersPendingDelete"
    :param quiet_trial: Whether to suppress any progress information during a trial run.

    :return: Nothing.
    """

    i = 0
    path = f"{os.path.split(query_p)[0]}{os.path.sep}"
    name = f"{os.path.split(query_p)[1]}"
    file_n = f"{path}{prefix}_{name}"
    while os.path.exists(file_n):
        i += 1
        file_n = f"{path}{prefix}{i}_{name}"
    if not trial:
        try:
            os.rename(query_p, file_n)
        except FileNotFoundError:
            raise ValueError(f"File not found: {query_p}")
        except PermissionError:
            raise ValueError(f"Permission error trying to rename: {query_p}")
    else:
        if not quiet_trial:
            query_p = query_p.replace(" ", "\ ")
            file_n = file_n.replace(" ", "\ ")
            print(f"mv {query_p} {file_n}")


# ----------------------------------------------------------------------------------------------------------------------
def delete_file(query_p,
                trial,
                quiet_trial):
    """
    Rename a query file.

    :param query_p: The full path to the file being renamed.
    :param trial: Whether to do a trial run instead of actually renaming.
    :param quiet_trial: Whether to suppress any progress information during a trial run.

    :return: Nothing.
    """

    if not trial:
        try:
            os.remove(query_p)
        except FileNotFoundError:
            raise ValueError(f"File not found: {query_p}")
        except PermissionError:
            raise ValueError(f"Permission error trying to delete: {query_p}")
    else:
        if not quiet_trial:
            query_p = query_p.replace(" ", "\ ")
            print(f"rm {query_p}")


# ----------------------------------------------------------------------------------------------------------------------
def delete_or_rename_file(query_p,
                          canonical_p,
                          do_rename,
                          trial,
                          quiet_trial,
                          skip_checksum,
                          options):
    """
    Deletes or renames a specific file.

    :param query_p: The path to the query file.
    :param canonical_p: The path to the canonical file.
    :param do_rename: Whether to rename the files instead of deleting them.
    :param trial: Do not actually run the rename or delete operation.
    :param quiet_trial: If running a trial, do not print out debug info.
    :param skip_checksum: Skip the checksum.
    :param options: A dictionary of which options to do a comparison on.

    :return: Nothing.
    """

    if not os.path.exists(query_p):
        return

    if not os.path.exists(canonical_p):
        raise(ValueError("Canonical file is missing"))

    query_metadata = comparefiles.get_metadata(query_p, os.path.sep)
    canonical_metadata = comparefiles.get_metadata(canonical_p, os.path.sep)

    if query_metadata["size"] != canonical_metadata["size"]:
        raise(ValueError("Sizes do not match"))

    if options["match_on_name"] and query_metadata["name"] != canonical_metadata["name"]:
        raise(ValueError("Names do not match"))

    if options["match_on_type"] and query_metadata["file_type"] != canonical_metadata["file_type"]:
        raise(ValueError("File types do not match"))

    if options["match_on_parent"] and query_metadata["parent"] != canonical_metadata["parent"]:
        raise(ValueError("Parent directory names do not match"))

    if options["match_on_relpath"] and query_metadata["rel_path"] != canonical_metadata["rel_path"]:
        raise(ValueError("Relative paths do not match"))

    if options["match_on_ctime"] and query_metadata["ctime"] != canonical_metadata["ctime"]:
        raise (ValueError("Creation date and times do not match"))

    if options["match_on_mtime"] and query_metadata["mtime"] != canonical_metadata["mtime"]:
        raise(ValueError("Modification date and times do not match"))

    if not skip_checksum:
        checksum = comparefiles.compare(query_p, canonical_p)
        if not checksum:
            raise(ValueError("Checksums do not match"))

    if do_rename:
        rename_file(query_p, trial, quiet_trial)
    else:
        delete_file(query_p, trial, quiet_trial)


# ----------------------------------------------------------------------------------------------------------------------
def delete_or_rename_files(duplicates,
                           options,
                           do_rename,
                           skip_checksum,
                           trial,
                           quiet_trial):
    """
    Deletes or renames the duplicate files.

    :param duplicates: The set of duplicates to delete or rename.
    :param options: A dictionary of which options to do a comparison on.
    :param do_rename: Whether to do a rename instead of a delete operation.
    :param skip_checksum: Skip checksum.
    :param trial: Whether to run in trial mode.
    :param quiet_trial: Whether to spit out diagnostics during the trial or not.

    :return: Nothing.
    """

    if ALWAYS_TRIAL:
        trial = True
        dl.print_msg("ALWAYS_TRIAL has been set to true in the code as a debug setting. No files will be altered.")

    action_past_str = "deleted"
    action_str = "Deleting"
    if do_rename:
        action_past_str = "renamed"
        action_str = "Renaming"

    count = len(duplicates)
    errors = list()

    for i, dupe_file_p in enumerate(duplicates):

        try:

            msg = f"{{BRIGHT_YELLOW}}{action_str} file {{COLOR_NONE}}{i+1}{{BRIGHT_YELLOW}} of {{COLOR_NONE}}{count}"
            if len(errors) > 0:
                msg += f"{{BRIGHT_RED}} Errors: {{COLOR_NONE}}{len(errors)}"
            dl.print_refreshable_msg(msg)

            try:
                query_p = dupe_file_p[1]
                canonical_p = dupe_file_p[2]
            except IndexError:
                errors.append((dupe_file_p, "", "Index Error"))
                continue

            try:
                delete_or_rename_file(query_p=query_p,
                                      canonical_p=canonical_p,
                                      do_rename=do_rename,
                                      trial=trial,
                                      quiet_trial=quiet_trial,
                                      skip_checksum=skip_checksum,
                                      options=options)
            except ValueError as e:
                errors.append((query_p, canonical_p, str(e)))

        except KeyboardInterrupt:
            dl.flush_refreshable_msg()
            msg = f"{{BRIGHT_YELLOW}}Processing file {{COLOR_NONE}}{i + 1} {{BRIGHT_YELLOW}} of {{COLOR_NONE}}{count}"
            dl.print_msg(msg)
            dl.print_msg(f"Operation canceled by user. {i + 1} files were {action_past_str}.")
            display_errors(errors)
            if trial:
                dl.print_msg(f"{{BRIGHT_GREEN}}(Trial Run Only - No Files Were Touched){{COLOR_NONE}}")
            sys.exit(EXIT_OK)

    dl.finish_refreshable_message()
    display_errors(errors)


# ----------------------------------------------------------------------------------------------------------------------
def main():

    parser_obj = parse_command_line()

    dl.print_msg("Reading log file...")
    lines = read_raw_log_file(parser_obj.args.log_file)
    options, query_dirs, canonical_d, num_matches, num_unique, log_start = read_log_file_header(lines)

    dl.print_msg("\nPre-processing log file...")
    duplicates = process_log(lines[log_start:])
    dl.print_msg("Finished pre-processing log files.")

    if parser_obj.args.rename:
        action = "rename"
    else:
        action = "delete"

    if parser_obj.args.trial:
        trial_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. No files will actually be {action}d"
    else:
        trial_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. Files will actually be {action}d."

    if not parser_obj.args.skip_checksum:
        checksum_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. A checksum will be run on both the "
        checksum_str += f"file to be {action}d and the canonical file"
    else:
        checksum_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. No checksum will be run before files are {action}d"

    if parser_obj.args.rename:
        rename_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. Files will be renamed instead of deleted"
    else:
        rename_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. Files will be deleted instead of renamed"

    dl.print_msg("\n\n")
    dl.print_msg("=" * 80)
    dl.print_msg(f"Compare Folders Log File: {{BRIGHT_YELLOW}}{parser_obj.args.log_file}")
    dl.print_msg(f"            Rename Files: {rename_str}")
    dl.print_msg(f"               Trial Run: {trial_str}")
    dl.print_msg(f"                Checksum: {checksum_str}")
    dl.print_msg()

    if parser_obj.args.trial:
        trial_str = f"{{BRIGHT_GREEN}}Trial Run: No files will actually be {action}d.{{BRIGHT_YELLOW}}"
    else:
        trial_str = ""

    prompt = f"{{BRIGHT_YELLOW}}About to {action} {num_matches} files. {trial_str} Continue?"
    result = dl.mult_choice_input(prompt,
                                  legal_answers=["Y", "N"],
                                  alternate_legal_answers={"YES": "Y", "NO": "N"},
                                  default="N",
                                  blank_lines=2)
    if result.upper() not in ["Y", "YES"]:
        dl.print_msg("Operation Canceled")
        sys.exit(EXIT_OK)

    delete_or_rename_files(duplicates=duplicates,
                           options=options,
                           do_rename=parser_obj.args.rename,
                           skip_checksum=parser_obj.args.skip_checksum,
                           trial=parser_obj.args.trial,
                           quiet_trial=parser_obj.args.quiet_trial)


main()
