#! /usr/bin/env python3

import os.path
import sys

from typing import Set, Tuple

from bvzdisplaylib import displaylib as dl

from src.parserdelete import Parser
from bvzscanfilesystem.scanfiles import ScanFiles
from bvzcomparedirs.canonicalfiles import CanonicalFiles

from bvzcomparedirs import comparesession

# Set to true when debugging if you don't want to actually really delete or rename. Same as using the -T option, but
# this forces that on regardless of whether you remember to use it or not. Should be False for actual use.
ALWAYS_TRIAL = False

EXIT_OK = 0
EXIT_LOG_FILE_NOT_FOUND = 2
EXIT_LOG_FILE_NO_PERMISSION = 3
EXIT_MALFORMED_HEADER = 4
EXIT_UNABLE_TO_PARSE = 5
EXIT_FILE_METADATA_MISMATCH = 6

DELIMITER = "@COMPAREFOLDERS@"


# ----------------------------------------------------------------------------------------------------------------------
def parse_command_line() -> Parser:
    """
    Processes the command line arguments and returns a parser object

    :return: A Parser object containing the contents of the command line arguments.
    """

    parser_obj = Parser(sys.argv[1:])
    try:
        parser_obj.validate()
    except (FileNotFoundError, NotADirectoryError, PermissionError) as e:
        msg = f"{{RED}}Error:{{COLOR_NONE}} {e}"
        dl.print_msg(msg)
        sys.exit(EXIT_UNABLE_TO_PARSE)

    return parser_obj


# ----------------------------------------------------------------------------------------------------------------------
def read_raw_log_file(log_file_p) -> list:
    """
    Reads the log file and returns a raw list of the contents


    :param log_file_p: The path to the log file.

    :return: A list of the raw lines, without any processing.
    """

    try:
        with open(log_file_p, "r") as log_f:
            lines = log_f.readlines()
    except FileNotFoundError:
        msg = f"{{RED}}Error:{{COLOR_NONE}} Unable to find log file: {log_file_p}"
        displaylib.display_message(msg)
        sys.exit(EXIT_LOG_FILE_NOT_FOUND)
    except PermissionError:
        msg = f"{{RED}}Error:{{COLOR_NONE}} You do not have permission to read log file: {log_file_p}"
        displaylib.display_message(msg)
        sys.exit(EXIT_LOG_FILE_NO_PERMISSION)

    return lines


# ----------------------------------------------------------------------------------------------------------------------
def read_log_file_header(lines) -> Tuple[dict, str, str, int]:
    """
    Reads the header of the log file to extract metadata

    :param lines: The list of all lines in the log file. This is the raw file as read by the file.readlines() method.

    :return: A tuple containing the header data.
    """

    try:
        raw_options = lines[0].rstrip("\n")
        query_d = lines[1].rstrip("\n")
        canonical_d = lines[2].rstrip("\n")
        try:
            dupe_count = int(lines[3].rstrip("\n"))
        except ValueError:
            msg = f"{{RED}}Error:{{COLOR_NONE}} Log file has a malformed header. Duplicate Count is not an integer."
            displaylib.display_message(msg)
            sys.exit(EXIT_MALFORMED_HEADER)
    except IndexError:
        msg = f"{{RED}}Error:{{COLOR_NONE}} Log file has a malformed header. Missing values."
        displaylib.display_message(msg)
        sys.exit(EXIT_MALFORMED_HEADER)

    if not os.path.exists(query_d):
        msg = f"{{RED}}Error:{{COLOR_NONE}} The query directory in log file header does not exist: {query_d}."
        displaylib.display_message(msg)
        sys.exit(EXIT_MALFORMED_HEADER)

    if not os.path.exists(canonical_d):
        msg = f"{{RED}}Error:{{COLOR_NONE}} The canonical directory in log file header does not exist: {canonical_d}."
        displaylib.display_message(msg)
        sys.exit(EXIT_MALFORMED_HEADER)

    for char in raw_options:
        if char not in "ntprcm":
            msg = f"{{RED}}Error:{{COLOR_NONE}} Illegal comparison operator in log file header: {char}."
            displaylib.display_message(msg)
            sys.exit(EXIT_MALFORMED_HEADER)

    options = dict()
    options["match_on_name"] = "n" in raw_options
    options["match_on_parent"] = "p" in raw_options
    options["match_on_type"] = "t" in raw_options
    options["match_on_relpath"] = "r" in raw_options
    options["match_on_ctime"] = "c" in raw_options
    options["match_on_mtime"] = "m" in raw_options

    return options, query_d, canonical_d, dupe_count


# ----------------------------------------------------------------------------------------------------------------------
def process_log(lines) -> Set[tuple]:
    """
    Processes the log and returns a set of items that are unique.

    :param lines: The raw list of lines from the log file. This MUST NOT INCLUDE the header lines.

    :return: A set containing each line split into a list.
    """

    process_lines = set()
    count = len(lines)
    i = 0
    try:
        for i, line in enumerate(lines):
            msg = f"Pre-Processing {i} of {count} - {{BRIGHT_YELLOW}}No files are being altered right now."
            displaylib.display_refreshable_message(msg)
            line_split = tuple(line.rstrip("\n").split(DELIMITER))
            if line_split[0] == "D":
                process_lines.add(line_split)
        if len(process_lines) == 0:
            raise IndexError

    except IndexError:
        displaylib.display_message("There are no duplicate files in the given log file.")
        sys.exit(EXIT_OK)

    except KeyboardInterrupt:
        displaylib.flush_refreshable_message()
        msg = f"Pre-Processing {i} of {count} - No files are being altered right now."
        displaylib.display_message(msg)
        displaylib.display_message("Operation canceled by user.")
        sys.exit(EXIT_OK)

    return process_lines


# ----------------------------------------------------------------------------------------------------------------------
def rename_file(query_p,
                trial,
                silent_trial,
                prefix="compareFoldersPendingDelete"):
    """
    Rename a query file.

    :param query_p: The full path to the file being renamed.
    :param trial: Whether to do a trial run instead of actually renaming.
    :param prefix: The prefix to prepend to the name. Defaults to "compareFoldersPendingDelete"
    :param silent_trial: Whether to suppress any progress information during a trial run.

    :return: Nothing.
    """

    i = 0
    path = f"{os.path.split(query_p)[0]}{os.path.sep}"
    name = f"{os.path.split(query_p)[1]}"
    file_n = f"{path}{prefix}_{name}"
    while os.path.exists(file_n):
        i += 1
        file_n = f"{path}{prefix}{i}_{name}"
    if not trial:
        try:
            os.rename(query_p, file_n)
        except FileNotFoundError:
            raise ValueError(f"File not found: {query_p}")
        except PermissionError:
            raise ValueError(f"Permission error trying to rename: {query_p}")
    else:
        if not silent_trial:
            print(f"mv {query_p} {file_n}")


# ----------------------------------------------------------------------------------------------------------------------
def delete_file(query_p,
                trial,
                silent_trial):
    """
    Rename a query file.

    :param query_p: The full path to the file being renamed.
    :param trial: Whether to do a trial run instead of actually renaming.
    :param silent_trial: Whether to suppress any progress information during a trial run.

    :return: Nothing.
    """

    if not trial:
        try:
            os.remove(query_p)
        except FileNotFoundError:
            raise ValueError(f"File not found: {query_p}")
        except PermissionError:
            raise ValueError(f"Permission error trying to delete: {query_p}")
    else:
        if not silent_trial:
            print(f"rm {query_p}")


# ----------------------------------------------------------------------------------------------------------------------
def delete_or_rename_file(query_p,
                          canonical_p,
                          options,
                          parser_obj,
                          query_scandir_obj,
                          canonical_scandir_obj):
    """
    Deletes or renames a specific file.

    :param query_p: The path to the query file.
    :param canonical_p: The path to the canonical file.
    :param options: A dictionary of which options to do a comparison on.
    :param parser_obj: The parser object.
    :param query_scandir_obj: The query scandir object.
    :param canonical_scandir_obj: The canonical scandir object.

    :return: Nothing.
    """

    if not os.path.exists(query_p):
        return

    query_metadata = query_scandir_obj.get_metadata(query_p)
    canonical_metadata = canonical_scandir_obj.get_metadata(canonical_p)

    if not os.path.exists(canonical_p):
        raise(ValueError("Canonical file is missing"))

    if query_metadata["size"] != canonical_metadata["size"]:
        raise(ValueError("Sizes do not match"))

    if options["match_on_name"] and query_metadata["name"] != canonical_metadata["name"]:
        raise(ValueError("Names do not match"))

    if options["match_on_type"] and query_metadata["file_type"] != canonical_metadata["file_type"]:
        raise(ValueError("File types do not match"))

    if options["match_on_parent"] and query_metadata["parent"] != canonical_metadata["parent"]:
        raise(ValueError("Parent directory names do not match"))

    if options["match_on_relpath"] and query_metadata["rel_path"] != canonical_metadata["rel_path"]:
        raise(ValueError("Relative paths do not match"))

    if options["match_on_ctime"] and query_metadata["ctime"] != canonical_metadata["ctime"]:
        raise (ValueError("Creation date and times do not match"))

    if options["match_on_mtime"] and query_metadata["mtime"] != canonical_metadata["mtime"]:
        raise(ValueError("Modification date and times do not match"))

    if parser_obj.args.checksum:
        if not comparefiles.md5_full_match(query_p, canonical_p):
            raise(ValueError("Checksums do not match"))

    if parser_obj.args.rename:
        rename_file(query_p, parser_obj.args.trial, parser_obj.args.silent_trial)
    else:
        delete_file(query_p, parser_obj.args.trial, parser_obj.args.silent_trial)


# ----------------------------------------------------------------------------------------------------------------------
def display_errors(errors):
    """
    Displays the list of errors.

    :param errors: The list of errors.

    :return: Nothing.
    """

    if len(errors) == 0:
        return

    error_file_p = os.path.expanduser(os.path.join("~", "deleteFiles_errors.log"))
    with open(error_file_p, "w") as log_f:
        for item in errors:
            log_f.write(f"{item[0]},{item[1]},{item[2]}")

    msg = f"\n\n{{BRIGHT_RED}}There were errors trying to rename or delete files."
    displaylib.display_message(msg)
    msg = "Do you want to view the errors? (Y/N) "
    result = ""
    while result.upper() not in ["Y", "YES", "N", "NO"]:
        result = input(msg)

    if result.upper() in ["Y", "YES"]:
        displaylib.display_message("\n\n")
        for item in errors:
            print(f"{item[2]}  ->  {item[0]}")

    displaylib.display_message("\n\n")
    displaylib.display_message(f"Error file written to: {error_file_p}")


# ----------------------------------------------------------------------------------------------------------------------
def delete_or_rename_files(duplicates,
                           options,
                           parser_obj,
                           query_scandir_obj,
                           canonical_scandir_obj,
                           count):
    """
    Deletes or renames the duplicate files.

    :param duplicates: The set of duplicates to delete or rename.
    :param options: A dictionary of which options to do a comparison on.
    :param parser_obj: The parser object.
    :param query_scandir_obj: The query scandir object.
    :param canonical_scandir_obj: The canonical scandir object.
    :param count: The total number of duplicates.

    :return: Nothing.
    """

    if ALWAYS_TRIAL:
        parser_obj.args.trial = True

    action_past = "deleted"
    action = "Deleting"
    if parser_obj.args.rename:
        action_past = "renamed"
        action = "Renaming"

    errors = list()

    for i, duplicate in enumerate(duplicates):

        try:
            msg = f"{{BRIGHT_YELLOW}}{action} file {{COLOR_NONE}}{i+1}{{BRIGHT_YELLOW}} of {{COLOR_NONE}}{count}"

            if len(errors) > 0:
                msg += f"{{BRIGHT_RED}} Errors: {{COLOR_NONE}}{len(errors)}"

            displaylib.display_refreshable_message(msg)

            try:
                query_p = duplicate[1]
                canonical_p = duplicate[2]
            except IndexError:
                errors.append((duplicate, "", "Index Error"))
                continue

            try:
                delete_or_rename_file(query_p,
                                      canonical_p,
                                      options,
                                      parser_obj,
                                      query_scandir_obj,
                                      canonical_scandir_obj)
            except ValueError as e:
                errors.append((query_p, canonical_p, str(e)))

        except KeyboardInterrupt:
            displaylib.flush_refreshable_message()
            msg = f"{{BRIGHT_YELLOW}}Processing file {{COLOR_NONE}}{i + 1} {{BRIGHT_YELLOW}} of {{COLOR_NONE}}{count}"
            displaylib.display_message(msg)
            displaylib.display_message(f"Operation canceled by user. {i + 1} files were {action_past}.")
            display_errors(errors)
            if parser_obj.args.trial:
                displaylib.display_message(f"{{BRIGHT_GREEN}}(Trial Run Only - No Files Were Touched){{COLOR_NONE}}")
            sys.exit(EXIT_OK)

    displaylib.finish_refreshable_message()
    display_errors(errors)


# ----------------------------------------------------------------------------------------------------------------------
def main():

    displaylib.display_message("\n\n\n")

    parser_obj = parse_command_line()

    lines = read_raw_log_file(parser_obj.args.log_file)

    options, query_d, canonical_d, dupe_count = read_log_file_header(lines)

    query_scandir_obj = QueryDir(query_d)
    canonical_scandir_obj = CanonicalDir(canonical_d)

    duplicates = process_log(lines[4:])

    if parser_obj.args.rename:
        action = "rename"
    else:
        action = "delete"

    if parser_obj.args.trial:
        trial_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. No files will actually be {action}d"
    else:
        trial_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. Files will actually be {action}d."

    if parser_obj.args.checksum:
        checksum_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. A checksum will be run on both the "
        checksum_str += f"file to be {action}d and the canonical file"
    else:
        checksum_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. No checksum will be run before files are {action}d"

    if parser_obj.args.rename:
        rename_str = f"{{BRIGHT_GREEN}}True{{COLOR_NONE}}. Files will be renamed instead of deleted"
    else:
        rename_str = f"{{BRIGHT_RED}}False{{COLOR_NONE}}. Files will be deleted instead of renamed"

    displaylib.display_message("=" * 80)
    displaylib.display_message(f"Compare Folders Log File: {{BRIGHT_YELLOW}}{parser_obj.args.log_file}")
    displaylib.display_message(f"            Rename Files: {rename_str}")
    displaylib.display_message(f"               Trial Run: {trial_str}")
    displaylib.display_message(f"                Checksum: {checksum_str}")
    displaylib.display_message()

    if parser_obj.args.trial:
        trial_str = f"{{BRIGHT_GREEN}}Trial Run: No files will actually be {action}d.{{BRIGHT_YELLOW}}"
    else:
        trial_str = ""

    prompt = f"{{BRIGHT_YELLOW}}About to {action} {dupe_count} files. {trial_str} Continue?{{COLOR_NONE}} (Y/N) "
    prompt = displaylib.format_string(prompt)
    result = ""

    while result.upper() not in ["Y", "N", "YES", "NO"]:
        result = input(prompt)
    if result.upper() not in ["Y", "YES"]:
        displaylib.display_message("Operation Canceled")
        sys.exit(EXIT_OK)

    delete_or_rename_files(duplicates,
                           options,
                           parser_obj,
                           query_scandir_obj,
                           canonical_scandir_obj,
                           dupe_count)


main()
