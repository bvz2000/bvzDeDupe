#! /usr/bin/env python3

import sys
import displaylib

import parser
from session import Session

parser_obj = parser.Parser(sys.argv[1:])
try:
    parser_obj.validate()
except (FileNotFoundError, NotADirectoryError, PermissionError) as e:
    msg = f"{{RED}}Error:{{COLOR_NONE}} {e}"
    displaylib.display_message(msg)
    sys.exit(1)
except FileExistsError as e:
    msg= f"{{YELLOW}}Warning:{{COLOR_NONE}} {e}"
    displaylib.display_message(msg)
    result = ""
    while result.upper() not in "YN":
        displaylib.display_message("Overwrite file? (Y/N)")
    if result.upper() != "Y":
        sys.exit(0)

session_obj = Session(query_dir=parser_obj.args.query_dir,
                      canonical_dir=parser_obj.args.canonical_dir,
                      skip_sub_dir=parser_obj.args.skip_sub_dir,
                      skip_hidden=not parser_obj.args.include_hidden,
                      skip_zero_len=not parser_obj.args.include_zero_length,
                      incl_dir_regex=parser_obj.args.incl_dir_regexes,
                      excl_dir_regex=parser_obj.args.excl_dir_regexes,
                      incl_file_regex=parser_obj.args.incl_file_regexes,
                      excl_file_regex=parser_obj.args.excl_file_regexes,
                      report_frequency=10)

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}QUERY DIRECTORY")
displaylib.display_message("="*80)
try:
    for counter in session_obj.do_query_scan():
        displaylib.display_refreshable_message(f"Files scanned so far: {counter}")
except IOError as e:
    displaylib.display_message(f"{{BRIGHT_RED}}ERROR:{{COLOR_NONE}} {str(e)}")
    sys.exit(1)
displaylib.display_refreshable_message(" "*80)
displaylib.finish_refreshable_message()

displaylib.display_message(f"Number of files scanned: {{BRIGHT_RED}}{session_obj.query_scan.checked_count}")
displaylib.display_message(f"Number of error files: {{BRIGHT_RED}}{session_obj.query_scan.error_count}")
displaylib.display_message(f"Number of links skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_links}")
displaylib.display_message(f"Number of zero length files skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_zero_len}")
displaylib.display_message(f"Number of hidden files skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_hidden}")
displaylib.display_message(f"Number of files skipped because they were outside of the inclusion regex's: {{BRIGHT_RED}}{session_obj.query_scan.skipped_include}")
displaylib.display_message(f"Number of files skipped because they matched the exclusion regex's: {{BRIGHT_RED}}{session_obj.query_scan.skipped_exclude}")
displaylib.display_message(f"Number of files accumulated: {{BRIGHT_RED}}{session_obj.query_scan.initial_count}")

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}CANONICAL DIRECTORY")
displaylib.display_message("="*80)
try:
    for counter in session_obj.do_canonical_scan():
        displaylib.display_refreshable_message(f"Files scanned so far: {counter}")
except IOError as e:
    displaylib.display_message(f"{{BRIGHT_RED}}ERROR:{{COLOR_NONE}} {str(e)}")
    sys.exit(1)
displaylib.display_refreshable_message(" "*80)
displaylib.finish_refreshable_message()

displaylib.display_message(f"Number of files scanned: {{BRIGHT_RED}}{session_obj.canonical_scan.checked_count}")
displaylib.display_message(f"Number of error files: {{BRIGHT_RED}}{session_obj.canonical_scan.error_count}")
displaylib.display_message(f"Number of links skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_links}")
displaylib.display_message(f"Number of zero length files skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_zero_len}")
displaylib.display_message(f"Number of hidden files skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_hidden}")
displaylib.display_message(f"Number of files skipped because they were outside of the inclusion regex's: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_include}")
displaylib.display_message(f"Number of files skipped because they matched the exclusion regex's: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_exclude}")
displaylib.display_message(f"Number of files accumulated: {{BRIGHT_RED}}{session_obj.canonical_scan.initial_count}")

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_YELLOW}}COMPARING FILES:")
displaylib.display_message("="*80)

old_percent = 0
for count in session_obj.do_compare(name=parser_obj.args.match_on_name,
                                    file_type=parser_obj.args.match_on_type,
                                    parent=parser_obj.args.match_on_parent,
                                    rel_path=parser_obj.args.match_on_relpath,
                                    ctime=parser_obj.args.match_on_ctime,
                                    mtime=parser_obj.args.match_on_mtime):
    old_percent = displaylib.display_progress(count=count,
                                              total=len(session_obj.query_scan.files),
                                              old_percent=old_percent)
displaylib.display_message("\n")

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}RESULTS:")
displaylib.display_message("="*80)

displaylib.display_message(f"Number of files checked: {{BRIGHT_RED}}{len(session_obj.query_scan.files)}")
displaylib.display_message(f"Number of duplicate files: {{BRIGHT_RED}}{len(session_obj.actual_matches)}")
displaylib.display_message(f"Number of times a checksum was reused: {{BRIGHT_RED}}{session_obj.pre_computed_checksum_count}")

result = ""
displaylib.display_message("\n\n")
while result.lower() not in {"yes", "y", "no", "n"}:
    result = input("Do you want to display the matching files? (Y/N)")
    if result.lower() in {"no", "n"}:
        sys.exit(0)

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}MATCHES")
displaylib.display_message("="*80)

for file_path, matches in session_obj.actual_matches.items():
    displaylib.display_message(file_path)
    for match in matches:
        displaylib.display_message(f"{{BRIGHT_CYAN}}{match}")
    displaylib.display_message("\n\n")
