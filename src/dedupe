#! /usr/bin/env python3
"""
NOTE: This code is SUPER SUPER TEMP. Just to test out the modules. Once those are working, this code will be refactored
into a proper front end.
"""
import sys
import displaylib

import comparefiles
from session import Session

query_path = sys.argv[1]
canonical_path = sys.argv[2]

session_obj = Session(query_dir=query_path,
                      canonical_dir=canonical_path,
                      report_frequency=10)

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}QUERY DIRECTORY")
displaylib.display_message("="*80)
try:
    for counter in session_obj.do_query_scan():
        displaylib.display_refreshable_message(f"Files scanned so far: {counter}")
except IOError as e:
    displaylib.display_message(f"{{BRIGHT_RED}}ERROR:{{COLOR_NONE}} {str(e)}")
    sys.exit(1)
displaylib.display_refreshable_message(" "*80)
displaylib.finish_refreshable_message()

displaylib.display_message(f"Number of files scanned: {{BRIGHT_RED}}{session_obj.query_scan.checked_count}")
displaylib.display_message(f"Number of error files: {{BRIGHT_RED}}{session_obj.query_scan.error_count}")
displaylib.display_message(f"Number of links skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_links}")
displaylib.display_message(f"Number of zero length files skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_zero_len}")
displaylib.display_message(f"Number of hidden files skipped: {{BRIGHT_RED}}{session_obj.query_scan.skipped_hidden}")
displaylib.display_message(f"Number of files skipped because they were outside of the inclusion regex's: {{BRIGHT_RED}}{session_obj.query_scan.skipped_include}")
displaylib.display_message(f"Number of files skipped because they matched the exclusion regex's: {{BRIGHT_RED}}{session_obj.query_scan.skipped_exclude}")
displaylib.display_message(f"Number of files accumulated: {{BRIGHT_RED}}{session_obj.query_scan.initial_count}")

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}CANONICAL DIRECTORY")
displaylib.display_message("="*80)
try:
    for counter in session_obj.do_canonical_scan():
        displaylib.display_refreshable_message(f"Files scanned so far: {counter}")
except IOError as e:
    displaylib.display_message(f"{{BRIGHT_RED}}ERROR:{{COLOR_NONE}} {str(e)}")
    sys.exit(1)
displaylib.display_refreshable_message(" "*80)
displaylib.finish_refreshable_message()

displaylib.display_message(f"Number of files scanned: {{BRIGHT_RED}}{session_obj.canonical_scan.checked_count}")
displaylib.display_message(f"Number of error files: {{BRIGHT_RED}}{session_obj.canonical_scan.error_count}")
displaylib.display_message(f"Number of links skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_links}")
displaylib.display_message(f"Number of zero length files skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_zero_len}")
displaylib.display_message(f"Number of hidden files skipped: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_hidden}")
displaylib.display_message(f"Number of files skipped because they were outside of the inclusion regex's: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_include}")
displaylib.display_message(f"Number of files skipped because they matched the exclusion regex's: {{BRIGHT_RED}}{session_obj.canonical_scan.skipped_exclude}")
displaylib.display_message(f"Number of files accumulated: {{BRIGHT_RED}}{session_obj.canonical_scan.initial_count}")

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_YELLOW}}COMPARING FILES:")
displaylib.display_message("="*80)

old_percent = 0
for count in session_obj.do_compare():
    old_percent = displaylib.display_progress(count=count,
                                              total=len(session_obj.query_scan.files),
                                              old_percent=old_percent)

# ----------------------------------------------------------------------------------------------------------------------
displaylib.display_message("\n\n{{BRIGHT_GREEN}}MATCHES")
displaylib.display_message("="*80)

for file_path, matches in session_obj.actual_matches.items():
    displaylib.display_message(file_path)
    for match in matches:
        displaylib.display_message(f"    {{BRIGHT_CYAN}}{match}")
    displaylib.display_message("\n\n")
#
# query_keys = list(query_scan_obj.afile_objs.keys())
# canonical_keys = list(canonical_scan_obj.afile_objs.keys())
# num_possible_matches = len([key for key in query_keys if key in canonical_keys])
#
# displaylib.display_message(f"Number of potential matches: {{BRIGHT_RED}}{num_possible_matches}")

# count = 0
# old_percent = 0
# matches = list()
# unique = list()
# for key in query_scan_obj.keys():
#     if key in canonical_scan_obj.keys():
#         old_percent = displaylib.display_progress(count=count,
#                                                   total=num_possible_matches,
#                                                   old_percent=old_percent)
#         checksum = comparefiles.compare(query_scan_obj.afile_objs[key].path, canonical_scan_obj.afile_objs[key].path)
#         if checksum:
#             matches.append((key, checksum))
#             canonical_scan_obj.afile_objs[key].md5 = checksum  # <- for the future when we store the checksum for multiple runs
#         else:
#             unique.append((key, checksum))
#         count += 1
#
# displaylib.display_message("\n\n\n{{BRIGHT_GREEN}}RESULTS:")
# displaylib.display_message("="*80)
#
# displaylib.display_message(f"                   Query Directory: {{BRIGHT_YELLOW}}{query_path}")
# displaylib.display_message(f"               Canonical Directory: {{BRIGHT_YELLOW}}{canonical_path}")
# displaylib.display_message(f"No. files already in canonical dir: {{BRIGHT_YELLOW}}{len(matches)}")
# displaylib.display_message(f"            No. unique query files: {{BRIGHT_YELLOW}}{len(unique)}")
#
# displaylib.display_message("\n\n\n{{BRIGHT_RED}}THIS CODE IS CURRENTLY BROKEN!!!! IT WILL NOT IDENTIFY ALL DUPLICATES.")
# displaylib.display_message("{{BRIGHT_RED}}DO NOT  -- REPEAT.. DO  NOT  --  RELY ON THIS TOOL TO CORRECTLY ID DUPLICATES.")
# # for item in matches:
# #     print(query_scan_obj.afile_objs[item[0]].name, item[1])
